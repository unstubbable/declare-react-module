// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`cli() when a module has invalid syntax exits and logs an error message with a code frame 1`] = `
" 8: 
 9:   render() {
10:     return <div>{this.props.foo,}</div>;
                                    ^
11:   }
12: }"
`;

exports[`cli() when an import can not be resolved exits and logs an error message with a code frame 1`] = `
"1: import * as React from 'react';
2: import {bar} from './dependency';
           ^
3: 
4: export default function Component() {"
`;

exports[`cli() with module export-from-js and a custom outDir writes the declaration file export-from-js.d.ts into the given directory 1`] = `
"/// <reference types=\\"react\\" />
declare module 'export-from-js' {
    export interface ComponentProps {
        foo: string;
    }

    export function Component(props: ComponentProps): JSX.Element;

}

"
`;

exports[`writeDeclarationFile() with a relative package dir writes a declaration file to the given package dir 1`] = `
"/// <reference types=\\"react\\" />
declare module 'export-from-js' {
    export interface ComponentProps {
        foo: string;
    }

    export function Component(props: ComponentProps): JSX.Element;

}

"
`;

exports[`writeDeclarationFile() with an absolute package dir writes a declaration file to the given package dir 1`] = `
"/// <reference types=\\"react\\" />
declare module 'export-from-js' {
    export interface ComponentProps {
        foo: string;
    }

    export function Component(props: ComponentProps): JSX.Element;

}

"
`;

exports[`writeDeclarationFile() with module export-from-js and a custom outDir writes the declaration file export-from-js.d.ts into the given directory 1`] = `
"/// <reference types=\\"react\\" />
declare module 'export-from-js' {
    export interface ComponentProps {
        foo: string;
    }

    export function Component(props: ComponentProps): JSX.Element;

}

"
`;
